# HG changeset patch
# User nunb <nunb@tallinn>
# Date 1251020762 -7200
# Node ID d4776463e85c757198ba025d2ffe47e815d94f68
# Parent  ea9d19c91a7461d047cf5be1d6026a10b064429c
Changed grid searching in dataseq

diff -r ea9d19c91a74 -r d4776463e85c src/widgets/gridedit.lisp
--- a/src/widgets/gridedit.lisp	Fri Aug 21 18:06:19 2009 +0200
+++ b/src/widgets/gridedit.lisp	Sun Aug 23 11:46:02 2009 +0200
@@ -15,6 +15,7 @@
 		 provide a dataform in the view mode. You can also
 		 customize 'gridedit-create-drilldown-widget' to provide
 		 more fine grained behavior."))
+  (:default-initargs :empty-message "No itemz")
   (:documentation "A widget based on the 'datagrid' that enhances it
   with user interface to add, remove, and modify data entries."))
 
diff -r ea9d19c91a74 -r d4776463e85c src/widgets/pagination.lisp
--- a/src/widgets/pagination.lisp	Fri Aug 21 18:06:19 2009 +0200
+++ b/src/widgets/pagination.lisp	Sun Aug 23 11:46:02 2009 +0200
@@ -122,15 +122,15 @@
 		       (when (> (pagination-current-page obj) 1)
 			 (decf (pagination-current-page obj))
 			 (pagination-call-on-change obj)))
-		     (humanize-name "< Previous")
+		     (humanize-name "< ")
 		     :class "previous-page")
 	(str "&nbsp;"))
       ; 'Viewing Page X of Y'
       (:span :class "page-info"
 	     (:span :class "viewing-label" "Viewing ")
-	     (:span :class "page-label" "Page ")
-	     (:span :class "current-page" (:strong (str (pagination-current-page obj))))
-	     (:span :class "of-label" " of ")
+	     (:span :class "page-label" "Pag. ") ;(str (cl-i18n::xtranslate "xx page xx"))
+	     (:span :class "current-page" (str (pagination-current-page obj)))
+	     (:span :class "of-label" " di ") ;(esc (cl-i18n::xtranslate "xx of xx"))
 	     (:span :class "total-pages" (str (pagination-page-count obj))))
       ; 'Next' link
       (when (< (pagination-current-page obj)
@@ -142,7 +142,7 @@
 				(pagination-page-count obj))
 			 (incf (pagination-current-page obj))
 			 (pagination-call-on-change obj)))
-		     (humanize-name "Next >")
+		     (humanize-name " >")
 		     :class "next-page"))
       ; Go to page
       (when (> (pagination-page-count obj) 1)
@@ -184,13 +184,14 @@
     (safe-funcall (pagination-on-change obj)
 		  obj begin end)))
 
+
 (defun pagination-on-go-to-page (obj &key page-number &allow-other-keys)
   "Handles client requests to go to a given page."
   (multiple-value-bind (res err)
       (ignore-errors
 	(let ((page (parse-integer page-number)))
 	  (assert (and (>= page 1)
-		       (<= page (max 1 (pagination-page-count obj)))))
+		       (<= page (max 1  (pagination-page-count obj))))) ; (<= page (max 1 (pagination-page-count obj)))))
 	  (setf (pagination-current-page obj) page)
 	  (pagination-call-on-change obj)))
     (declare (ignore res))
@@ -203,6 +204,3 @@
 	  (flash (flash-message on-error msg))
 	  (function (funcall on-error msg)))))))
 
-(defun pagination-reset (obj count)
-  (setf (pagination-total-items obj) count)
-  (pagination-on-go-to-page obj :page-number "1"))
# HG changeset patch
# User nunb <nunb@tallinn>
# Date 1251020762 -7200
# Node ID d4776463e85c757198ba025d2ffe47e815d94f68
# Parent  ea9d19c91a7461d047cf5be1d6026a10b064429c
Changed grid searching in dataseq

diff -r ea9d19c91a74 -r d4776463e85c src/widgets/gridedit.lisp
--- a/src/widgets/gridedit.lisp	Fri Aug 21 18:06:19 2009 +0200
+++ b/src/widgets/gridedit.lisp	Sun Aug 23 11:46:02 2009 +0200
@@ -15,6 +15,7 @@
 		 provide a dataform in the view mode. You can also
 		 customize 'gridedit-create-drilldown-widget' to provide
 		 more fine grained behavior."))
+  (:default-initargs :empty-message "No itemz")
   (:documentation "A widget based on the 'datagrid' that enhances it
   with user interface to add, remove, and modify data entries."))
 
diff -r ea9d19c91a74 -r d4776463e85c src/widgets/pagination.lisp
--- a/src/widgets/pagination.lisp	Fri Aug 21 18:06:19 2009 +0200
+++ b/src/widgets/pagination.lisp	Sun Aug 23 11:46:02 2009 +0200
@@ -122,15 +122,15 @@
 		       (when (> (pagination-current-page obj) 1)
 			 (decf (pagination-current-page obj))
 			 (pagination-call-on-change obj)))
-		     (humanize-name "< Previous")
+		     (humanize-name "< ")
 		     :class "previous-page")
 	(str "&nbsp;"))
       ; 'Viewing Page X of Y'
       (:span :class "page-info"
 	     (:span :class "viewing-label" "Viewing ")
-	     (:span :class "page-label" "Page ")
-	     (:span :class "current-page" (:strong (str (pagination-current-page obj))))
-	     (:span :class "of-label" " of ")
+	     (:span :class "page-label" "Pag. ") ;(str (cl-i18n::xtranslate "xx page xx"))
+	     (:span :class "current-page" (str (pagination-current-page obj)))
+	     (:span :class "of-label" " di ") ;(esc (cl-i18n::xtranslate "xx of xx"))
 	     (:span :class "total-pages" (str (pagination-page-count obj))))
       ; 'Next' link
       (when (< (pagination-current-page obj)
@@ -142,7 +142,7 @@
 				(pagination-page-count obj))
 			 (incf (pagination-current-page obj))
 			 (pagination-call-on-change obj)))
-		     (humanize-name "Next >")
+		     (humanize-name " >")
 		     :class "next-page"))
       ; Go to page
       (when (> (pagination-page-count obj) 1)
@@ -184,13 +184,14 @@
     (safe-funcall (pagination-on-change obj)
 		  obj begin end)))
 
+
 (defun pagination-on-go-to-page (obj &key page-number &allow-other-keys)
   "Handles client requests to go to a given page."
   (multiple-value-bind (res err)
       (ignore-errors
 	(let ((page (parse-integer page-number)))
 	  (assert (and (>= page 1)
-		       (<= page (max 1 (pagination-page-count obj)))))
+		       (<= page (max 1  (pagination-page-count obj))))) ; (<= page (max 1 (pagination-page-count obj)))))
 	  (setf (pagination-current-page obj) page)
 	  (pagination-call-on-change obj)))
     (declare (ignore res))
@@ -203,6 +204,3 @@
 	  (flash (flash-message on-error msg))
 	  (function (funcall on-error msg)))))))
 
-(defun pagination-reset (obj count)
-  (setf (pagination-total-items obj) count)
-  (pagination-on-go-to-page obj :page-number "1"))
# HG changeset patch
# User nunb <nunb@tallinn>
# Date 1251020762 -7200
# Node ID d4776463e85c757198ba025d2ffe47e815d94f68
# Parent  ea9d19c91a7461d047cf5be1d6026a10b064429c
Changed grid searching in dataseq

diff -r ea9d19c91a74 -r d4776463e85c src/widgets/gridedit.lisp
--- a/src/widgets/gridedit.lisp	Fri Aug 21 18:06:19 2009 +0200
+++ b/src/widgets/gridedit.lisp	Sun Aug 23 11:46:02 2009 +0200
@@ -15,6 +15,7 @@
 		 provide a dataform in the view mode. You can also
 		 customize 'gridedit-create-drilldown-widget' to provide
 		 more fine grained behavior."))
+  (:default-initargs :empty-message "No itemz")
   (:documentation "A widget based on the 'datagrid' that enhances it
   with user interface to add, remove, and modify data entries."))
 
diff -r ea9d19c91a74 -r d4776463e85c src/widgets/pagination.lisp
--- a/src/widgets/pagination.lisp	Fri Aug 21 18:06:19 2009 +0200
+++ b/src/widgets/pagination.lisp	Sun Aug 23 11:46:02 2009 +0200
@@ -122,15 +122,15 @@
 		       (when (> (pagination-current-page obj) 1)
 			 (decf (pagination-current-page obj))
 			 (pagination-call-on-change obj)))
-		     (humanize-name "< Previous")
+		     (humanize-name "< ")
 		     :class "previous-page")
 	(str "&nbsp;"))
       ; 'Viewing Page X of Y'
       (:span :class "page-info"
 	     (:span :class "viewing-label" "Viewing ")
-	     (:span :class "page-label" "Page ")
-	     (:span :class "current-page" (:strong (str (pagination-current-page obj))))
-	     (:span :class "of-label" " of ")
+	     (:span :class "page-label" "Pag. ") ;(str (cl-i18n::xtranslate "xx page xx"))
+	     (:span :class "current-page" (str (pagination-current-page obj)))
+	     (:span :class "of-label" " di ") ;(esc (cl-i18n::xtranslate "xx of xx"))
 	     (:span :class "total-pages" (str (pagination-page-count obj))))
       ; 'Next' link
       (when (< (pagination-current-page obj)
@@ -142,7 +142,7 @@
 				(pagination-page-count obj))
 			 (incf (pagination-current-page obj))
 			 (pagination-call-on-change obj)))
-		     (humanize-name "Next >")
+		     (humanize-name " >")
 		     :class "next-page"))
       ; Go to page
       (when (> (pagination-page-count obj) 1)
@@ -184,13 +184,14 @@
     (safe-funcall (pagination-on-change obj)
 		  obj begin end)))
 
+
 (defun pagination-on-go-to-page (obj &key page-number &allow-other-keys)
   "Handles client requests to go to a given page."
   (multiple-value-bind (res err)
       (ignore-errors
 	(let ((page (parse-integer page-number)))
 	  (assert (and (>= page 1)
-		       (<= page (max 1 (pagination-page-count obj)))))
+		       (<= page (max 1  (pagination-page-count obj))))) ; (<= page (max 1 (pagination-page-count obj)))))
 	  (setf (pagination-current-page obj) page)
 	  (pagination-call-on-change obj)))
     (declare (ignore res))
@@ -203,6 +204,3 @@
 	  (flash (flash-message on-error msg))
 	  (function (funcall on-error msg)))))))
 
-(defun pagination-reset (obj count)
-  (setf (pagination-total-items obj) count)
-  (pagination-on-go-to-page obj :page-number "1"))
