# HG changeset patch
# User nunb <nunb@tallinn>
# Date 1243937862 -7200
# Node ID 19efdb5d911aae35cce7d31df2d0d30fbb14815e
# Parent  7ced1237bb0bcfc1c9126ef1b2ea2a8f47f2d368
Some quick-save stuff

diff -r 7ced1237bb0b -r 19efdb5d911a src/nunb-customize/quick-save.lisp
--- a/src/nunb-customize/quick-save.lisp	Mon May 11 17:04:34 2009 +0200
+++ b/src/nunb-customize/quick-save.lisp	Tue Jun 02 12:17:42 2009 +0200
@@ -2,7 +2,25 @@
 
 ; A kickass way to quickly save data. In progress. Based on saikat's onkeyup mods and my older make-action-string-with-args code.
 
-(defmethod render-view-field-value (value (presentation input-presentation)
+(defclass auto-input-presentation (input-presentation) ;? text-parser or text-presentation
+  ())
+
+(defclass auto-checkbox-presentation (checkbox-presentation)
+  ())
+
+(defclass auto-dropdown-presentation (dropdown-presentation)
+  ())
+
+; Earlier this autosubmit/onchange submission was enabled for all standard presentations. However, now you have to explicitly
+; request it by prefixing auto- to the standard presentation.
+
+; So far this integrates with dataform in that it stores temporary values in intermediate-values. A further development could entail
+; making a auto-dataform that a) does not render submit/cancel buttons and b) sets a form.element observer (either for all elements, or some etc)
+; and once the observer times out, auto submits the form (naturally validation errors will prevent updates) .. another option would be
+; that since auto-submitting the standard way just pushes browser form values into the object (via update-object-view-f...) and we already have
+; a cached copy of form values in intermediate-values, to skip this..
+
+(defmethod render-view-field-value (value (presentation auto-input-presentation)
 				    field view widget obj
 				    &rest args &key intermediate-values &allow-other-keys)
   (let ((attributized-slot-name (attributize-name (view-field-slot-name field)))
@@ -24,7 +42,7 @@
 					     widget field-id)
 		  :maxlength (input-presentation-max-length presentation))))))
 
-(defmethod render-view-field-value (value (presentation dropdown-presentation)
+(defmethod render-view-field-value (value (presentation auto-dropdown-presentation)
 				    (field form-view-field) (view form-view) widget obj
 				    &rest args &key intermediate-values &allow-other-keys)
   (declare (ignore args))
@@ -45,7 +63,25 @@
 					 (when value
 					   (attributize-name value)))))))
 
+(defmethod render-view-field-value (value (presentation auto-checkbox-presentation)
+				    (field form-view-field) (view form-view) widget obj
+				    &rest args &key intermediate-values &allow-other-keys)
+  (declare (ignore args))
+  (multiple-value-bind (intermediate-value intermediate-value-p)
+      (form-field-intermediate-value field intermediate-values)
+       (let ((is-checked (if intermediate-value-p
+			 intermediate-value
+			 value))
+	     (field-id (gensym "someid")))
+      (render-checkbox (view-field-slot-name field)
+		       is-checked
+		       :id field-id
+		       :onclick (nunb-stringify-event (lambda (widget &rest args &key value &allow-other-keys)
+							(quick-update field value presentation view widget obj intermediate-values)
+							(warn (format nil "Lambda got ~A widget and ~A args and value is ~A" widget args value)))
+						     widget field-id)))))
 
+;(format nil "this.disabled=true;Effect.toggle('~A', 'blind');this.disabled=false;" (get-state presentation))
 
 (defun quick-update (field value presentn view widget obj intermediates)
   ;(break (format nil "Quickupdate called with ~A value" value))
# HG changeset patch
# User nunb <nunb@tallinn>
# Date 1243937862 -7200
# Node ID 19efdb5d911aae35cce7d31df2d0d30fbb14815e
# Parent  7ced1237bb0bcfc1c9126ef1b2ea2a8f47f2d368
Some quick-save stuff

diff -r 7ced1237bb0b -r 19efdb5d911a src/nunb-customize/quick-save.lisp
--- a/src/nunb-customize/quick-save.lisp	Mon May 11 17:04:34 2009 +0200
+++ b/src/nunb-customize/quick-save.lisp	Tue Jun 02 12:17:42 2009 +0200
@@ -2,7 +2,25 @@
 
 ; A kickass way to quickly save data. In progress. Based on saikat's onkeyup mods and my older make-action-string-with-args code.
 
-(defmethod render-view-field-value (value (presentation input-presentation)
+(defclass auto-input-presentation (input-presentation) ;? text-parser or text-presentation
+  ())
+
+(defclass auto-checkbox-presentation (checkbox-presentation)
+  ())
+
+(defclass auto-dropdown-presentation (dropdown-presentation)
+  ())
+
+; Earlier this autosubmit/onchange submission was enabled for all standard presentations. However, now you have to explicitly
+; request it by prefixing auto- to the standard presentation.
+
+; So far this integrates with dataform in that it stores temporary values in intermediate-values. A further development could entail
+; making a auto-dataform that a) does not render submit/cancel buttons and b) sets a form.element observer (either for all elements, or some etc)
+; and once the observer times out, auto submits the form (naturally validation errors will prevent updates) .. another option would be
+; that since auto-submitting the standard way just pushes browser form values into the object (via update-object-view-f...) and we already have
+; a cached copy of form values in intermediate-values, to skip this..
+
+(defmethod render-view-field-value (value (presentation auto-input-presentation)
 				    field view widget obj
 				    &rest args &key intermediate-values &allow-other-keys)
   (let ((attributized-slot-name (attributize-name (view-field-slot-name field)))
@@ -24,7 +42,7 @@
 					     widget field-id)
 		  :maxlength (input-presentation-max-length presentation))))))
 
-(defmethod render-view-field-value (value (presentation dropdown-presentation)
+(defmethod render-view-field-value (value (presentation auto-dropdown-presentation)
 				    (field form-view-field) (view form-view) widget obj
 				    &rest args &key intermediate-values &allow-other-keys)
   (declare (ignore args))
@@ -45,7 +63,25 @@
 					 (when value
 					   (attributize-name value)))))))
 
+(defmethod render-view-field-value (value (presentation auto-checkbox-presentation)
+				    (field form-view-field) (view form-view) widget obj
+				    &rest args &key intermediate-values &allow-other-keys)
+  (declare (ignore args))
+  (multiple-value-bind (intermediate-value intermediate-value-p)
+      (form-field-intermediate-value field intermediate-values)
+       (let ((is-checked (if intermediate-value-p
+			 intermediate-value
+			 value))
+	     (field-id (gensym "someid")))
+      (render-checkbox (view-field-slot-name field)
+		       is-checked
+		       :id field-id
+		       :onclick (nunb-stringify-event (lambda (widget &rest args &key value &allow-other-keys)
+							(quick-update field value presentation view widget obj intermediate-values)
+							(warn (format nil "Lambda got ~A widget and ~A args and value is ~A" widget args value)))
+						     widget field-id)))))
 
+;(format nil "this.disabled=true;Effect.toggle('~A', 'blind');this.disabled=false;" (get-state presentation))
 
 (defun quick-update (field value presentn view widget obj intermediates)
   ;(break (format nil "Quickupdate called with ~A value" value))
# HG changeset patch
# User nunb <nunb@tallinn>
# Date 1243937862 -7200
# Node ID 19efdb5d911aae35cce7d31df2d0d30fbb14815e
# Parent  7ced1237bb0bcfc1c9126ef1b2ea2a8f47f2d368
Some quick-save stuff

diff -r 7ced1237bb0b -r 19efdb5d911a src/nunb-customize/quick-save.lisp
--- a/src/nunb-customize/quick-save.lisp	Mon May 11 17:04:34 2009 +0200
+++ b/src/nunb-customize/quick-save.lisp	Tue Jun 02 12:17:42 2009 +0200
@@ -2,7 +2,25 @@
 
 ; A kickass way to quickly save data. In progress. Based on saikat's onkeyup mods and my older make-action-string-with-args code.
 
-(defmethod render-view-field-value (value (presentation input-presentation)
+(defclass auto-input-presentation (input-presentation) ;? text-parser or text-presentation
+  ())
+
+(defclass auto-checkbox-presentation (checkbox-presentation)
+  ())
+
+(defclass auto-dropdown-presentation (dropdown-presentation)
+  ())
+
+; Earlier this autosubmit/onchange submission was enabled for all standard presentations. However, now you have to explicitly
+; request it by prefixing auto- to the standard presentation.
+
+; So far this integrates with dataform in that it stores temporary values in intermediate-values. A further development could entail
+; making a auto-dataform that a) does not render submit/cancel buttons and b) sets a form.element observer (either for all elements, or some etc)
+; and once the observer times out, auto submits the form (naturally validation errors will prevent updates) .. another option would be
+; that since auto-submitting the standard way just pushes browser form values into the object (via update-object-view-f...) and we already have
+; a cached copy of form values in intermediate-values, to skip this..
+
+(defmethod render-view-field-value (value (presentation auto-input-presentation)
 				    field view widget obj
 				    &rest args &key intermediate-values &allow-other-keys)
   (let ((attributized-slot-name (attributize-name (view-field-slot-name field)))
@@ -24,7 +42,7 @@
 					     widget field-id)
 		  :maxlength (input-presentation-max-length presentation))))))
 
-(defmethod render-view-field-value (value (presentation dropdown-presentation)
+(defmethod render-view-field-value (value (presentation auto-dropdown-presentation)
 				    (field form-view-field) (view form-view) widget obj
 				    &rest args &key intermediate-values &allow-other-keys)
   (declare (ignore args))
@@ -45,7 +63,25 @@
 					 (when value
 					   (attributize-name value)))))))
 
+(defmethod render-view-field-value (value (presentation auto-checkbox-presentation)
+				    (field form-view-field) (view form-view) widget obj
+				    &rest args &key intermediate-values &allow-other-keys)
+  (declare (ignore args))
+  (multiple-value-bind (intermediate-value intermediate-value-p)
+      (form-field-intermediate-value field intermediate-values)
+       (let ((is-checked (if intermediate-value-p
+			 intermediate-value
+			 value))
+	     (field-id (gensym "someid")))
+      (render-checkbox (view-field-slot-name field)
+		       is-checked
+		       :id field-id
+		       :onclick (nunb-stringify-event (lambda (widget &rest args &key value &allow-other-keys)
+							(quick-update field value presentation view widget obj intermediate-values)
+							(warn (format nil "Lambda got ~A widget and ~A args and value is ~A" widget args value)))
+						     widget field-id)))))
 
+;(format nil "this.disabled=true;Effect.toggle('~A', 'blind');this.disabled=false;" (get-state presentation))
 
 (defun quick-update (field value presentn view widget obj intermediates)
   ;(break (format nil "Quickupdate called with ~A value" value))
