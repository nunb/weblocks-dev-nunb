# HG changeset patch
# User nunb <nunb@tallinn>
# Date 1250870779 -7200
# Node ID ea9d19c91a7461d047cf5be1d6026a10b064429c
# Parent  4088df5ec2e06e4ced5a7e05043329ce9ea151a6
Add Fremlin fixes

diff -r 4088df5ec2e0 -r ea9d19c91a74 src/widgets/dataseq/dataseq.lisp
--- a/src/widgets/dataseq/dataseq.lisp	Tue Jul 14 14:20:04 2009 +0200
+++ b/src/widgets/dataseq/dataseq.lisp	Fri Aug 21 18:06:19 2009 +0200
@@ -235,15 +235,20 @@
 		 (dataseq-data-class obj)
 		 (class-name (dataseq-data-class obj)))))))
 
-;;; Dataset management
-(defun dataseq-data (obj)
-  "Returns the items in the sequence. If 'dataseq-on-query' is a
+(defgeneric dataseq-data-range (obj &optional begin end)
+  (:method (obj &optional begin end)
+    (assert (eq (not (and begin end)) (not (or begin end))))
+    (dataseq-unprocessed-data-range obj begin end))
+  (:documentation "Returns a sequence of data between begin and end; if both begin and end are null, then returns all data"))
+
+(defgeneric dataseq-unprocessed-data-range (dataseq &optional begin end)
+  (:documentation "Returns a sequence of data between begin and end unfiltered by any processing; if both begin and end are null, then returns all data"))
+
+(defmethod dataseq-unprocessed-data-range ((obj dataseq) &optional begin end)
+ "Returns the items in the sequence. If 'dataseq-on-query' is a
 function designator, calls the function designated by
-'dataseq-on-query'. Otherwise, uses persistent store API."
-  (multiple-value-bind (begin end)
-      (when (dataseq-allow-pagination-p obj)
-	(pagination-page-item-range (dataseq-pagination-widget obj)))
-    (if (function-designator-p (dataseq-on-query obj))
+'dataseq-on-query'. Otherwise, uses persistent store API."  
+  (if (function-designator-p (dataseq-on-query obj))
 	(funcall (dataseq-on-query obj)
 		 obj (dataseq-sort obj)
 		 (when (and begin end) (cons begin end)))
@@ -252,9 +257,21 @@
 	       (dataseq-data-class obj)
 	       :order-by (dataseq-sort obj)
 	       :range (when (and begin end) (cons begin end))
-	       (dataseq-on-query obj)))))
+	       (dataseq-on-query obj))))
 
-(defun dataseq-data-count (obj)
+
+
+;;; Dataset management
+(defun dataseq-data (obj)
+  "Returns the items in the sequence or one page of them if pagination is active"
+  (multiple-value-bind (begin end)
+      (when (dataseq-allow-pagination-p obj)
+	(pagination-page-item-range (dataseq-pagination-widget obj)))
+    (dataseq-data-range obj begin end)))
+
+(defgeneric dataseq-data-count (obj))
+
+(defmethod dataseq-data-count ((obj dataseq))
   "Returns the number of items in the sequence."
   (if (function-designator-p (dataseq-on-query obj))
       (funcall (dataseq-on-query obj)
diff -r 4088df5ec2e0 -r ea9d19c91a74 src/widgets/pagination.lisp
--- a/src/widgets/pagination.lisp	Tue Jul 14 14:20:04 2009 +0200
+++ b/src/widgets/pagination.lisp	Fri Aug 21 18:06:19 2009 +0200
@@ -122,15 +122,15 @@
 		       (when (> (pagination-current-page obj) 1)
 			 (decf (pagination-current-page obj))
 			 (pagination-call-on-change obj)))
-		     (humanize-name "< ")
+		     (humanize-name "< Previous")
 		     :class "previous-page")
 	(str "&nbsp;"))
       ; 'Viewing Page X of Y'
       (:span :class "page-info"
 	     (:span :class "viewing-label" "Viewing ")
-	     (:span :class "page-label" "Pag. ") ;(str (cl-i18n::xtranslate "xx page xx"))
-	     (:span :class "current-page" (str (pagination-current-page obj)))
-	     (:span :class "of-label" " di ") ;(esc (cl-i18n::xtranslate "xx of xx"))
+	     (:span :class "page-label" "Page ")
+	     (:span :class "current-page" (:strong (str (pagination-current-page obj))))
+	     (:span :class "of-label" " of ")
 	     (:span :class "total-pages" (str (pagination-page-count obj))))
       ; 'Next' link
       (when (< (pagination-current-page obj)
@@ -142,7 +142,7 @@
 				(pagination-page-count obj))
 			 (incf (pagination-current-page obj))
 			 (pagination-call-on-change obj)))
-		     (humanize-name " >")
+		     (humanize-name "Next >")
 		     :class "next-page"))
       ; Go to page
       (when (> (pagination-page-count obj) 1)
@@ -190,7 +190,7 @@
       (ignore-errors
 	(let ((page (parse-integer page-number)))
 	  (assert (and (>= page 1)
-		       (<= page (pagination-page-count obj))))
+		       (<= page (max 1 (pagination-page-count obj)))))
 	  (setf (pagination-current-page obj) page)
 	  (pagination-call-on-change obj)))
     (declare (ignore res))
@@ -203,3 +203,6 @@
 	  (flash (flash-message on-error msg))
 	  (function (funcall on-error msg)))))))
 
+(defun pagination-reset (obj count)
+  (setf (pagination-total-items obj) count)
+  (pagination-on-go-to-page obj :page-number "1"))
# HG changeset patch
# User nunb <nunb@tallinn>
# Date 1250870779 -7200
# Node ID ea9d19c91a7461d047cf5be1d6026a10b064429c
# Parent  4088df5ec2e06e4ced5a7e05043329ce9ea151a6
Add Fremlin fixes

diff -r 4088df5ec2e0 -r ea9d19c91a74 src/widgets/dataseq/dataseq.lisp
--- a/src/widgets/dataseq/dataseq.lisp	Tue Jul 14 14:20:04 2009 +0200
+++ b/src/widgets/dataseq/dataseq.lisp	Fri Aug 21 18:06:19 2009 +0200
@@ -235,15 +235,20 @@
 		 (dataseq-data-class obj)
 		 (class-name (dataseq-data-class obj)))))))
 
-;;; Dataset management
-(defun dataseq-data (obj)
-  "Returns the items in the sequence. If 'dataseq-on-query' is a
+(defgeneric dataseq-data-range (obj &optional begin end)
+  (:method (obj &optional begin end)
+    (assert (eq (not (and begin end)) (not (or begin end))))
+    (dataseq-unprocessed-data-range obj begin end))
+  (:documentation "Returns a sequence of data between begin and end; if both begin and end are null, then returns all data"))
+
+(defgeneric dataseq-unprocessed-data-range (dataseq &optional begin end)
+  (:documentation "Returns a sequence of data between begin and end unfiltered by any processing; if both begin and end are null, then returns all data"))
+
+(defmethod dataseq-unprocessed-data-range ((obj dataseq) &optional begin end)
+ "Returns the items in the sequence. If 'dataseq-on-query' is a
 function designator, calls the function designated by
-'dataseq-on-query'. Otherwise, uses persistent store API."
-  (multiple-value-bind (begin end)
-      (when (dataseq-allow-pagination-p obj)
-	(pagination-page-item-range (dataseq-pagination-widget obj)))
-    (if (function-designator-p (dataseq-on-query obj))
+'dataseq-on-query'. Otherwise, uses persistent store API."  
+  (if (function-designator-p (dataseq-on-query obj))
 	(funcall (dataseq-on-query obj)
 		 obj (dataseq-sort obj)
 		 (when (and begin end) (cons begin end)))
@@ -252,9 +257,21 @@
 	       (dataseq-data-class obj)
 	       :order-by (dataseq-sort obj)
 	       :range (when (and begin end) (cons begin end))
-	       (dataseq-on-query obj)))))
+	       (dataseq-on-query obj))))
 
-(defun dataseq-data-count (obj)
+
+
+;;; Dataset management
+(defun dataseq-data (obj)
+  "Returns the items in the sequence or one page of them if pagination is active"
+  (multiple-value-bind (begin end)
+      (when (dataseq-allow-pagination-p obj)
+	(pagination-page-item-range (dataseq-pagination-widget obj)))
+    (dataseq-data-range obj begin end)))
+
+(defgeneric dataseq-data-count (obj))
+
+(defmethod dataseq-data-count ((obj dataseq))
   "Returns the number of items in the sequence."
   (if (function-designator-p (dataseq-on-query obj))
       (funcall (dataseq-on-query obj)
diff -r 4088df5ec2e0 -r ea9d19c91a74 src/widgets/pagination.lisp
--- a/src/widgets/pagination.lisp	Tue Jul 14 14:20:04 2009 +0200
+++ b/src/widgets/pagination.lisp	Fri Aug 21 18:06:19 2009 +0200
@@ -122,15 +122,15 @@
 		       (when (> (pagination-current-page obj) 1)
 			 (decf (pagination-current-page obj))
 			 (pagination-call-on-change obj)))
-		     (humanize-name "< ")
+		     (humanize-name "< Previous")
 		     :class "previous-page")
 	(str "&nbsp;"))
       ; 'Viewing Page X of Y'
       (:span :class "page-info"
 	     (:span :class "viewing-label" "Viewing ")
-	     (:span :class "page-label" "Pag. ") ;(str (cl-i18n::xtranslate "xx page xx"))
-	     (:span :class "current-page" (str (pagination-current-page obj)))
-	     (:span :class "of-label" " di ") ;(esc (cl-i18n::xtranslate "xx of xx"))
+	     (:span :class "page-label" "Page ")
+	     (:span :class "current-page" (:strong (str (pagination-current-page obj))))
+	     (:span :class "of-label" " of ")
 	     (:span :class "total-pages" (str (pagination-page-count obj))))
       ; 'Next' link
       (when (< (pagination-current-page obj)
@@ -142,7 +142,7 @@
 				(pagination-page-count obj))
 			 (incf (pagination-current-page obj))
 			 (pagination-call-on-change obj)))
-		     (humanize-name " >")
+		     (humanize-name "Next >")
 		     :class "next-page"))
       ; Go to page
       (when (> (pagination-page-count obj) 1)
@@ -190,7 +190,7 @@
       (ignore-errors
 	(let ((page (parse-integer page-number)))
 	  (assert (and (>= page 1)
-		       (<= page (pagination-page-count obj))))
+		       (<= page (max 1 (pagination-page-count obj)))))
 	  (setf (pagination-current-page obj) page)
 	  (pagination-call-on-change obj)))
     (declare (ignore res))
@@ -203,3 +203,6 @@
 	  (flash (flash-message on-error msg))
 	  (function (funcall on-error msg)))))))
 
+(defun pagination-reset (obj count)
+  (setf (pagination-total-items obj) count)
+  (pagination-on-go-to-page obj :page-number "1"))
# HG changeset patch
# User nunb <nunb@tallinn>
# Date 1250870779 -7200
# Node ID ea9d19c91a7461d047cf5be1d6026a10b064429c
# Parent  4088df5ec2e06e4ced5a7e05043329ce9ea151a6
Add Fremlin fixes

diff -r 4088df5ec2e0 -r ea9d19c91a74 src/widgets/dataseq/dataseq.lisp
--- a/src/widgets/dataseq/dataseq.lisp	Tue Jul 14 14:20:04 2009 +0200
+++ b/src/widgets/dataseq/dataseq.lisp	Fri Aug 21 18:06:19 2009 +0200
@@ -235,15 +235,20 @@
 		 (dataseq-data-class obj)
 		 (class-name (dataseq-data-class obj)))))))
 
-;;; Dataset management
-(defun dataseq-data (obj)
-  "Returns the items in the sequence. If 'dataseq-on-query' is a
+(defgeneric dataseq-data-range (obj &optional begin end)
+  (:method (obj &optional begin end)
+    (assert (eq (not (and begin end)) (not (or begin end))))
+    (dataseq-unprocessed-data-range obj begin end))
+  (:documentation "Returns a sequence of data between begin and end; if both begin and end are null, then returns all data"))
+
+(defgeneric dataseq-unprocessed-data-range (dataseq &optional begin end)
+  (:documentation "Returns a sequence of data between begin and end unfiltered by any processing; if both begin and end are null, then returns all data"))
+
+(defmethod dataseq-unprocessed-data-range ((obj dataseq) &optional begin end)
+ "Returns the items in the sequence. If 'dataseq-on-query' is a
 function designator, calls the function designated by
-'dataseq-on-query'. Otherwise, uses persistent store API."
-  (multiple-value-bind (begin end)
-      (when (dataseq-allow-pagination-p obj)
-	(pagination-page-item-range (dataseq-pagination-widget obj)))
-    (if (function-designator-p (dataseq-on-query obj))
+'dataseq-on-query'. Otherwise, uses persistent store API."  
+  (if (function-designator-p (dataseq-on-query obj))
 	(funcall (dataseq-on-query obj)
 		 obj (dataseq-sort obj)
 		 (when (and begin end) (cons begin end)))
@@ -252,9 +257,21 @@
 	       (dataseq-data-class obj)
 	       :order-by (dataseq-sort obj)
 	       :range (when (and begin end) (cons begin end))
-	       (dataseq-on-query obj)))))
+	       (dataseq-on-query obj))))
 
-(defun dataseq-data-count (obj)
+
+
+;;; Dataset management
+(defun dataseq-data (obj)
+  "Returns the items in the sequence or one page of them if pagination is active"
+  (multiple-value-bind (begin end)
+      (when (dataseq-allow-pagination-p obj)
+	(pagination-page-item-range (dataseq-pagination-widget obj)))
+    (dataseq-data-range obj begin end)))
+
+(defgeneric dataseq-data-count (obj))
+
+(defmethod dataseq-data-count ((obj dataseq))
   "Returns the number of items in the sequence."
   (if (function-designator-p (dataseq-on-query obj))
       (funcall (dataseq-on-query obj)
diff -r 4088df5ec2e0 -r ea9d19c91a74 src/widgets/pagination.lisp
--- a/src/widgets/pagination.lisp	Tue Jul 14 14:20:04 2009 +0200
+++ b/src/widgets/pagination.lisp	Fri Aug 21 18:06:19 2009 +0200
@@ -122,15 +122,15 @@
 		       (when (> (pagination-current-page obj) 1)
 			 (decf (pagination-current-page obj))
 			 (pagination-call-on-change obj)))
-		     (humanize-name "< ")
+		     (humanize-name "< Previous")
 		     :class "previous-page")
 	(str "&nbsp;"))
       ; 'Viewing Page X of Y'
       (:span :class "page-info"
 	     (:span :class "viewing-label" "Viewing ")
-	     (:span :class "page-label" "Pag. ") ;(str (cl-i18n::xtranslate "xx page xx"))
-	     (:span :class "current-page" (str (pagination-current-page obj)))
-	     (:span :class "of-label" " di ") ;(esc (cl-i18n::xtranslate "xx of xx"))
+	     (:span :class "page-label" "Page ")
+	     (:span :class "current-page" (:strong (str (pagination-current-page obj))))
+	     (:span :class "of-label" " of ")
 	     (:span :class "total-pages" (str (pagination-page-count obj))))
       ; 'Next' link
       (when (< (pagination-current-page obj)
@@ -142,7 +142,7 @@
 				(pagination-page-count obj))
 			 (incf (pagination-current-page obj))
 			 (pagination-call-on-change obj)))
-		     (humanize-name " >")
+		     (humanize-name "Next >")
 		     :class "next-page"))
       ; Go to page
       (when (> (pagination-page-count obj) 1)
@@ -190,7 +190,7 @@
       (ignore-errors
 	(let ((page (parse-integer page-number)))
 	  (assert (and (>= page 1)
-		       (<= page (pagination-page-count obj))))
+		       (<= page (max 1 (pagination-page-count obj)))))
 	  (setf (pagination-current-page obj) page)
 	  (pagination-call-on-change obj)))
     (declare (ignore res))
@@ -203,3 +203,6 @@
 	  (flash (flash-message on-error msg))
 	  (function (funcall on-error msg)))))))
 
+(defun pagination-reset (obj count)
+  (setf (pagination-total-items obj) count)
+  (pagination-on-go-to-page obj :page-number "1"))
