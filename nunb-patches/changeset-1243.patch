# HG changeset patch
# User nunb <nunb@tallinn>
# Date 1246900271 -7200
# Node ID 376fc6814776b178c5b4d0ccb8867d59c041e7fb
# Parent  4fd21f5f729584cc6be449c408a1d49a20ea5698
MODIF WEBLOCKS

diff -r 4fd21f5f7295 -r 376fc6814776 src/dependencies.lisp
--- a/src/dependencies.lisp	Tue Jun 02 12:22:25 2009 +0200
+++ b/src/dependencies.lisp	Mon Jul 06 19:11:11 2009 +0200
@@ -42,6 +42,7 @@
 
 (defclass url-dependency-mixin ()
   ((url :accessor dependency-url :initarg :url
+        :type (or string pathname puri:uri)
 	:documentation "URL to the object, represented as a string. May
 	be a relative or an absolute URL. Using the reader for this slot
 	always returns an URI object (as defined by the PURI
@@ -50,7 +51,10 @@
 
 (defmethod dependency-url ((obj url-dependency-mixin))
   "Reading dependency-url always returns an URI object"
-  (puri:uri (slot-value obj 'url)))
+  (with-slots (url) obj
+    (etypecase url
+      ((or string pathname) (setf url (puri:uri url)))
+      (puri:uri url))))
 
 (defclass stylesheet-dependency (dependency url-dependency-mixin)
   ((media :accessor stylesheet-media :initarg :media :initform nil))
diff -r 4fd21f5f7295 -r 376fc6814776 src/nunb-customize/quick-save.lisp
--- a/src/nunb-customize/quick-save.lisp	Tue Jun 02 12:22:25 2009 +0200
+++ b/src/nunb-customize/quick-save.lisp	Mon Jul 06 19:11:11 2009 +0200
@@ -83,6 +83,7 @@
 
 ;(format nil "this.disabled=true;Effect.toggle('~A', 'blind');this.disabled=false;" (get-state presentation))
 
+; quick-save
 (defun quick-update (field value presentn view widget obj intermediates)
   ;(break (format nil "Quickupdate called with ~A value" value))
   (let* (
diff -r 4fd21f5f7295 -r 376fc6814776 src/request-handler.lisp
--- a/src/request-handler.lisp	Tue Jun 02 12:22:25 2009 +0200
+++ b/src/request-handler.lisp	Mon Jul 06 19:11:11 2009 +0200
@@ -92,11 +92,13 @@
       (let ((*weblocks-output-stream* (make-string-output-stream))
 	    (*uri-tokens* (tokenize-uri (request-uri)))
 	    (*current-navigation-url* "/") *dirty-widgets*
+	    *page-scripts*
 	    *before-ajax-complete-scripts* *on-ajax-complete-scripts*
 	    *page-dependencies* *current-page-description*
 	    *uri-tokens-fully-consumed*
 	    (cl-who::*indent* (weblocks-webapp-html-indent-p app)))
 	(declare (special *weblocks-output-stream* *current-navigation-url* *dirty-widgets*
+	    	          *page-scripts*
 			  *on-ajax-complete-scripts* *uri-tokens* *page-dependencies*
 			  *current-page-description* *uri-tokens-fully-consumed*))
 	(when (pure-request-p)
diff -r 4fd21f5f7295 -r 376fc6814776 src/snippets/html-utils.lisp
--- a/src/snippets/html-utils.lisp	Tue Jun 02 12:22:25 2009 +0200
+++ b/src/snippets/html-utils.lisp	Mon Jul 06 19:11:11 2009 +0200
@@ -342,16 +342,33 @@
 This is a performance optimization.")
 
 (defun send-script (script &optional (place :after-load))
-  (if (ajax-request-p)
+    (cond
+      ((ajax-request-p)
+       (let ((code (with-javascript-to-string script)))
+         (declare (special *before-ajax-complete-scripts* *on-ajax-complete-scripts*))
+         (ecase place
+           (:before-load (push code *before-ajax-complete-scripts*))
+           (:after-load (push code *on-ajax-complete-scripts*)))))
+      (*defer-inline-js*
+       (locally
+         (declare (special *page-scripts*))
+         (push-end script *page-scripts*)))
+      (t
+       (with-javascript
+         script)))))
+
+
+
+  #+nomore(if (ajax-request-p)
     (let ((code (with-javascript-to-string script)))
     ;(let ((json (format nil "new Function(~A)" (encode-json-to-string script))))
       (declare (special *before-ajax-complete-scripts* *on-ajax-complete-scripts*))
       ;(warn (format nil "pushed js code ~A " code))
       (ecase place
-        (:before-load (push code *before-ajax-complete-scripts*))
-        (:after-load (push code *on-ajax-complete-scripts*))))
+        (:before-load (push-end code *before-ajax-complete-scripts*))
+        (:after-load (push-end code *on-ajax-complete-scripts*))))
     (with-javascript
-      script)))
+      script))
 
 (defun render-message (message &optional caption)
   "Renders a message to the user with standardized markup."
diff -r 4fd21f5f7295 -r 376fc6814776 src/widgets/widget/#widget.lisp#
--- a/src/widgets/widget/#widget.lisp#	Tue Jun 02 12:22:25 2009 +0200
+++ b/src/widgets/widget/#widget.lisp#	Mon Jul 06 19:11:11 2009 +0200
@@ -98,21 +98,10 @@
 ;;; Don't allow setting a parent for widget that already has one
 ;;; (unless it's setting parent to nil)
 (defmethod (setf widget-parent) (val (obj widget))
-  (if (and val (not (member (widget-parent obj) `(,val nil)))
-	   (not *override-parent-p*))
+  (if (and val (widget-parent obj) (not *override-parent-p*))
       (error "Widget ~a already has a parent." obj)
       (setf (slot-value obj 'parent) val)))
 
-(deftype widget-designator ()
-  "The supertype of all widgets.  Check against this type instead of
-`widget' unless you know what you're doing."
-  '(or widget (and symbol (not null)) string function))
-
-(defun widget-designator-p (widget)
-  "Returns t when widget is a valid, renderable widget; this includes
-strings, function, etc."
-  (identity (typep widget 'widget-designator)))
-
 ;;; Define widget-rendered-p for objects that don't derive from
 ;;; 'widget'
 (defmethod widget-rendered-p (obj)
@@ -130,21 +119,6 @@
   (declare (ignore obj val))
   nil)
 
-(defgeneric make-widget-place-writer (container widget)
-  (:documentation "Returns a function accepting (&optional ARG) that
-   encapsulates the place where widget is stored, behaving like this:
-
-      When ARG not given, return the current contained widget.
-      Otherwise, put ARG in the place, set ARG's parent to CONTAINER,
-      and dirty CONTAINER.  Signal an error if this place is no longer
-      valid or ARG is null.
-
-   Any widget that supports flows must implement this function.  Part
-   of the contract is that the fn sets the parent slot of the callee
-   to the container.  The other part is that the widget is dirty after
-   the write via a direct call to make-dirty, or to a write to a
-   widget slot."))
-
 (defgeneric with-widget-header (obj body-fn &rest args &key
 				    widget-prefix-fn widget-suffix-fn
 				    &allow-other-keys)
@@ -256,7 +230,7 @@
 Note, this function is automatically called when widget slots are
 modified, unless slots are marked with affects-dirty-status-p."))
 
-(defmethod mark-dirty ((w widget) &key putp)
+(defmethod mark-dirty ((w widget) &key (putp t))
   (declare (special *dirty-widgets*))
   (when (functionp w)
     (error "AJAX is not supported for functions. Convert the function
# HG changeset patch
# User nunb <nunb@tallinn>
# Date 1246900271 -7200
# Node ID 376fc6814776b178c5b4d0ccb8867d59c041e7fb
# Parent  4fd21f5f729584cc6be449c408a1d49a20ea5698
MODIF WEBLOCKS

diff -r 4fd21f5f7295 -r 376fc6814776 src/dependencies.lisp
--- a/src/dependencies.lisp	Tue Jun 02 12:22:25 2009 +0200
+++ b/src/dependencies.lisp	Mon Jul 06 19:11:11 2009 +0200
@@ -42,6 +42,7 @@
 
 (defclass url-dependency-mixin ()
   ((url :accessor dependency-url :initarg :url
+        :type (or string pathname puri:uri)
 	:documentation "URL to the object, represented as a string. May
 	be a relative or an absolute URL. Using the reader for this slot
 	always returns an URI object (as defined by the PURI
@@ -50,7 +51,10 @@
 
 (defmethod dependency-url ((obj url-dependency-mixin))
   "Reading dependency-url always returns an URI object"
-  (puri:uri (slot-value obj 'url)))
+  (with-slots (url) obj
+    (etypecase url
+      ((or string pathname) (setf url (puri:uri url)))
+      (puri:uri url))))
 
 (defclass stylesheet-dependency (dependency url-dependency-mixin)
   ((media :accessor stylesheet-media :initarg :media :initform nil))
diff -r 4fd21f5f7295 -r 376fc6814776 src/nunb-customize/quick-save.lisp
--- a/src/nunb-customize/quick-save.lisp	Tue Jun 02 12:22:25 2009 +0200
+++ b/src/nunb-customize/quick-save.lisp	Mon Jul 06 19:11:11 2009 +0200
@@ -83,6 +83,7 @@
 
 ;(format nil "this.disabled=true;Effect.toggle('~A', 'blind');this.disabled=false;" (get-state presentation))
 
+; quick-save
 (defun quick-update (field value presentn view widget obj intermediates)
   ;(break (format nil "Quickupdate called with ~A value" value))
   (let* (
diff -r 4fd21f5f7295 -r 376fc6814776 src/request-handler.lisp
--- a/src/request-handler.lisp	Tue Jun 02 12:22:25 2009 +0200
+++ b/src/request-handler.lisp	Mon Jul 06 19:11:11 2009 +0200
@@ -92,11 +92,13 @@
       (let ((*weblocks-output-stream* (make-string-output-stream))
 	    (*uri-tokens* (tokenize-uri (request-uri)))
 	    (*current-navigation-url* "/") *dirty-widgets*
+	    *page-scripts*
 	    *before-ajax-complete-scripts* *on-ajax-complete-scripts*
 	    *page-dependencies* *current-page-description*
 	    *uri-tokens-fully-consumed*
 	    (cl-who::*indent* (weblocks-webapp-html-indent-p app)))
 	(declare (special *weblocks-output-stream* *current-navigation-url* *dirty-widgets*
+	    	          *page-scripts*
 			  *on-ajax-complete-scripts* *uri-tokens* *page-dependencies*
 			  *current-page-description* *uri-tokens-fully-consumed*))
 	(when (pure-request-p)
diff -r 4fd21f5f7295 -r 376fc6814776 src/snippets/html-utils.lisp
--- a/src/snippets/html-utils.lisp	Tue Jun 02 12:22:25 2009 +0200
+++ b/src/snippets/html-utils.lisp	Mon Jul 06 19:11:11 2009 +0200
@@ -342,16 +342,33 @@
 This is a performance optimization.")
 
 (defun send-script (script &optional (place :after-load))
-  (if (ajax-request-p)
+    (cond
+      ((ajax-request-p)
+       (let ((code (with-javascript-to-string script)))
+         (declare (special *before-ajax-complete-scripts* *on-ajax-complete-scripts*))
+         (ecase place
+           (:before-load (push code *before-ajax-complete-scripts*))
+           (:after-load (push code *on-ajax-complete-scripts*)))))
+      (*defer-inline-js*
+       (locally
+         (declare (special *page-scripts*))
+         (push-end script *page-scripts*)))
+      (t
+       (with-javascript
+         script)))))
+
+
+
+  #+nomore(if (ajax-request-p)
     (let ((code (with-javascript-to-string script)))
     ;(let ((json (format nil "new Function(~A)" (encode-json-to-string script))))
       (declare (special *before-ajax-complete-scripts* *on-ajax-complete-scripts*))
       ;(warn (format nil "pushed js code ~A " code))
       (ecase place
-        (:before-load (push code *before-ajax-complete-scripts*))
-        (:after-load (push code *on-ajax-complete-scripts*))))
+        (:before-load (push-end code *before-ajax-complete-scripts*))
+        (:after-load (push-end code *on-ajax-complete-scripts*))))
     (with-javascript
-      script)))
+      script))
 
 (defun render-message (message &optional caption)
   "Renders a message to the user with standardized markup."
diff -r 4fd21f5f7295 -r 376fc6814776 src/widgets/widget/#widget.lisp#
--- a/src/widgets/widget/#widget.lisp#	Tue Jun 02 12:22:25 2009 +0200
+++ b/src/widgets/widget/#widget.lisp#	Mon Jul 06 19:11:11 2009 +0200
@@ -98,21 +98,10 @@
 ;;; Don't allow setting a parent for widget that already has one
 ;;; (unless it's setting parent to nil)
 (defmethod (setf widget-parent) (val (obj widget))
-  (if (and val (not (member (widget-parent obj) `(,val nil)))
-	   (not *override-parent-p*))
+  (if (and val (widget-parent obj) (not *override-parent-p*))
       (error "Widget ~a already has a parent." obj)
       (setf (slot-value obj 'parent) val)))
 
-(deftype widget-designator ()
-  "The supertype of all widgets.  Check against this type instead of
-`widget' unless you know what you're doing."
-  '(or widget (and symbol (not null)) string function))
-
-(defun widget-designator-p (widget)
-  "Returns t when widget is a valid, renderable widget; this includes
-strings, function, etc."
-  (identity (typep widget 'widget-designator)))
-
 ;;; Define widget-rendered-p for objects that don't derive from
 ;;; 'widget'
 (defmethod widget-rendered-p (obj)
@@ -130,21 +119,6 @@
   (declare (ignore obj val))
   nil)
 
-(defgeneric make-widget-place-writer (container widget)
-  (:documentation "Returns a function accepting (&optional ARG) that
-   encapsulates the place where widget is stored, behaving like this:
-
-      When ARG not given, return the current contained widget.
-      Otherwise, put ARG in the place, set ARG's parent to CONTAINER,
-      and dirty CONTAINER.  Signal an error if this place is no longer
-      valid or ARG is null.
-
-   Any widget that supports flows must implement this function.  Part
-   of the contract is that the fn sets the parent slot of the callee
-   to the container.  The other part is that the widget is dirty after
-   the write via a direct call to make-dirty, or to a write to a
-   widget slot."))
-
 (defgeneric with-widget-header (obj body-fn &rest args &key
 				    widget-prefix-fn widget-suffix-fn
 				    &allow-other-keys)
@@ -256,7 +230,7 @@
 Note, this function is automatically called when widget slots are
 modified, unless slots are marked with affects-dirty-status-p."))
 
-(defmethod mark-dirty ((w widget) &key putp)
+(defmethod mark-dirty ((w widget) &key (putp t))
   (declare (special *dirty-widgets*))
   (when (functionp w)
     (error "AJAX is not supported for functions. Convert the function
# HG changeset patch
# User nunb <nunb@tallinn>
# Date 1246900271 -7200
# Node ID 376fc6814776b178c5b4d0ccb8867d59c041e7fb
# Parent  4fd21f5f729584cc6be449c408a1d49a20ea5698
MODIF WEBLOCKS

diff -r 4fd21f5f7295 -r 376fc6814776 src/dependencies.lisp
--- a/src/dependencies.lisp	Tue Jun 02 12:22:25 2009 +0200
+++ b/src/dependencies.lisp	Mon Jul 06 19:11:11 2009 +0200
@@ -42,6 +42,7 @@
 
 (defclass url-dependency-mixin ()
   ((url :accessor dependency-url :initarg :url
+        :type (or string pathname puri:uri)
 	:documentation "URL to the object, represented as a string. May
 	be a relative or an absolute URL. Using the reader for this slot
 	always returns an URI object (as defined by the PURI
@@ -50,7 +51,10 @@
 
 (defmethod dependency-url ((obj url-dependency-mixin))
   "Reading dependency-url always returns an URI object"
-  (puri:uri (slot-value obj 'url)))
+  (with-slots (url) obj
+    (etypecase url
+      ((or string pathname) (setf url (puri:uri url)))
+      (puri:uri url))))
 
 (defclass stylesheet-dependency (dependency url-dependency-mixin)
   ((media :accessor stylesheet-media :initarg :media :initform nil))
diff -r 4fd21f5f7295 -r 376fc6814776 src/nunb-customize/quick-save.lisp
--- a/src/nunb-customize/quick-save.lisp	Tue Jun 02 12:22:25 2009 +0200
+++ b/src/nunb-customize/quick-save.lisp	Mon Jul 06 19:11:11 2009 +0200
@@ -83,6 +83,7 @@
 
 ;(format nil "this.disabled=true;Effect.toggle('~A', 'blind');this.disabled=false;" (get-state presentation))
 
+; quick-save
 (defun quick-update (field value presentn view widget obj intermediates)
   ;(break (format nil "Quickupdate called with ~A value" value))
   (let* (
diff -r 4fd21f5f7295 -r 376fc6814776 src/request-handler.lisp
--- a/src/request-handler.lisp	Tue Jun 02 12:22:25 2009 +0200
+++ b/src/request-handler.lisp	Mon Jul 06 19:11:11 2009 +0200
@@ -92,11 +92,13 @@
       (let ((*weblocks-output-stream* (make-string-output-stream))
 	    (*uri-tokens* (tokenize-uri (request-uri)))
 	    (*current-navigation-url* "/") *dirty-widgets*
+	    *page-scripts*
 	    *before-ajax-complete-scripts* *on-ajax-complete-scripts*
 	    *page-dependencies* *current-page-description*
 	    *uri-tokens-fully-consumed*
 	    (cl-who::*indent* (weblocks-webapp-html-indent-p app)))
 	(declare (special *weblocks-output-stream* *current-navigation-url* *dirty-widgets*
+	    	          *page-scripts*
 			  *on-ajax-complete-scripts* *uri-tokens* *page-dependencies*
 			  *current-page-description* *uri-tokens-fully-consumed*))
 	(when (pure-request-p)
diff -r 4fd21f5f7295 -r 376fc6814776 src/snippets/html-utils.lisp
--- a/src/snippets/html-utils.lisp	Tue Jun 02 12:22:25 2009 +0200
+++ b/src/snippets/html-utils.lisp	Mon Jul 06 19:11:11 2009 +0200
@@ -342,16 +342,33 @@
 This is a performance optimization.")
 
 (defun send-script (script &optional (place :after-load))
-  (if (ajax-request-p)
+    (cond
+      ((ajax-request-p)
+       (let ((code (with-javascript-to-string script)))
+         (declare (special *before-ajax-complete-scripts* *on-ajax-complete-scripts*))
+         (ecase place
+           (:before-load (push code *before-ajax-complete-scripts*))
+           (:after-load (push code *on-ajax-complete-scripts*)))))
+      (*defer-inline-js*
+       (locally
+         (declare (special *page-scripts*))
+         (push-end script *page-scripts*)))
+      (t
+       (with-javascript
+         script)))))
+
+
+
+  #+nomore(if (ajax-request-p)
     (let ((code (with-javascript-to-string script)))
     ;(let ((json (format nil "new Function(~A)" (encode-json-to-string script))))
       (declare (special *before-ajax-complete-scripts* *on-ajax-complete-scripts*))
       ;(warn (format nil "pushed js code ~A " code))
       (ecase place
-        (:before-load (push code *before-ajax-complete-scripts*))
-        (:after-load (push code *on-ajax-complete-scripts*))))
+        (:before-load (push-end code *before-ajax-complete-scripts*))
+        (:after-load (push-end code *on-ajax-complete-scripts*))))
     (with-javascript
-      script)))
+      script))
 
 (defun render-message (message &optional caption)
   "Renders a message to the user with standardized markup."
diff -r 4fd21f5f7295 -r 376fc6814776 src/widgets/widget/#widget.lisp#
--- a/src/widgets/widget/#widget.lisp#	Tue Jun 02 12:22:25 2009 +0200
+++ b/src/widgets/widget/#widget.lisp#	Mon Jul 06 19:11:11 2009 +0200
@@ -98,21 +98,10 @@
 ;;; Don't allow setting a parent for widget that already has one
 ;;; (unless it's setting parent to nil)
 (defmethod (setf widget-parent) (val (obj widget))
-  (if (and val (not (member (widget-parent obj) `(,val nil)))
-	   (not *override-parent-p*))
+  (if (and val (widget-parent obj) (not *override-parent-p*))
       (error "Widget ~a already has a parent." obj)
       (setf (slot-value obj 'parent) val)))
 
-(deftype widget-designator ()
-  "The supertype of all widgets.  Check against this type instead of
-`widget' unless you know what you're doing."
-  '(or widget (and symbol (not null)) string function))
-
-(defun widget-designator-p (widget)
-  "Returns t when widget is a valid, renderable widget; this includes
-strings, function, etc."
-  (identity (typep widget 'widget-designator)))
-
 ;;; Define widget-rendered-p for objects that don't derive from
 ;;; 'widget'
 (defmethod widget-rendered-p (obj)
@@ -130,21 +119,6 @@
   (declare (ignore obj val))
   nil)
 
-(defgeneric make-widget-place-writer (container widget)
-  (:documentation "Returns a function accepting (&optional ARG) that
-   encapsulates the place where widget is stored, behaving like this:
-
-      When ARG not given, return the current contained widget.
-      Otherwise, put ARG in the place, set ARG's parent to CONTAINER,
-      and dirty CONTAINER.  Signal an error if this place is no longer
-      valid or ARG is null.
-
-   Any widget that supports flows must implement this function.  Part
-   of the contract is that the fn sets the parent slot of the callee
-   to the container.  The other part is that the widget is dirty after
-   the write via a direct call to make-dirty, or to a write to a
-   widget slot."))
-
 (defgeneric with-widget-header (obj body-fn &rest args &key
 				    widget-prefix-fn widget-suffix-fn
 				    &allow-other-keys)
@@ -256,7 +230,7 @@
 Note, this function is automatically called when widget slots are
 modified, unless slots are marked with affects-dirty-status-p."))
 
-(defmethod mark-dirty ((w widget) &key putp)
+(defmethod mark-dirty ((w widget) &key (putp t))
   (declare (special *dirty-widgets*))
   (when (functionp w)
     (error "AJAX is not supported for functions. Convert the function
